/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerJsClient);
  }
}(this, function(expect, SwaggerJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerJsClient.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('apiDocJsonGet', function() {
        it('should call apiDocJsonGet successfully', function(done) {
          // TODO: uncomment apiDocJsonGet call
          /*

          instance.apiDocJsonGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCompany', function() {
        it('should call deleteCompany successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCompany call and complete the assertions
          /*

          instance.deleteCompany(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteVendor', function() {
        it('should call deleteVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteVendor call and complete the assertions
          /*

          instance.deleteVendor(vendorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCompanies', function() {
        it('should call getCompanies successfully', function(done) {
          // TODO: uncomment getCompanies call and complete the assertions
          /*

          instance.getCompanies(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SwaggerJsClient.Company);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCompany', function() {
        it('should call getCompany successfully', function(done) {
          // TODO: uncomment, update parameter values for getCompany call and complete the assertions
          /*

          instance.getCompany(companyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerJsClient.Company);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVendor', function() {
        it('should call getVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for getVendor call and complete the assertions
          /*

          instance.getVendor(vendorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerJsClient.Vendor);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVendors', function() {
        it('should call getVendors successfully', function(done) {
          // TODO: uncomment getVendors call and complete the assertions
          /*

          instance.getVendors(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SwaggerJsClient.Vendor);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partiallyUpdateCompany', function() {
        it('should call partiallyUpdateCompany successfully', function(done) {
          // TODO: uncomment, update parameter values for partiallyUpdateCompany call
          /*
          var opts = {};

          instance.partiallyUpdateCompany(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('partiallyUpdateVendor', function() {
        it('should call partiallyUpdateVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for partiallyUpdateVendor call
          /*
          var opts = {};

          instance.partiallyUpdateVendor(vendorId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postNewCompany', function() {
        it('should call postNewCompany successfully', function(done) {
          // TODO: uncomment, update parameter values for postNewCompany call and complete the assertions
          /*
          var opts = {};

          instance.postNewCompany(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;number&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postNewVendor', function() {
        it('should call postNewVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for postNewVendor call and complete the assertions
          /*
          var opts = {};

          instance.postNewVendor(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;number&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCompany', function() {
        it('should call updateCompany successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCompany call
          /*
          var opts = {};

          instance.updateCompany(companyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateVendor', function() {
        it('should call updateVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for updateVendor call
          /*
          var opts = {};

          instance.updateVendor(vendorId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
